/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResultIndexRouteImport } from './routes/result/index'

const errors503LazyRouteImport = createFileRoute('/(errors)/503')()
const errors500LazyRouteImport = createFileRoute('/(errors)/500')()
const errors404LazyRouteImport = createFileRoute('/(errors)/404')()
const errors403LazyRouteImport = createFileRoute('/(errors)/403')()
const errors401LazyRouteImport = createFileRoute('/(errors)/401')()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResultIndexRoute = ResultIndexRouteImport.update({
  id: '/result/',
  path: '/result/',
  getParentRoute: () => rootRouteImport,
} as any)
const errors503LazyRoute = errors503LazyRouteImport
  .update({
    id: '/(errors)/503',
    path: '/503',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/503.lazy').then((d) => d.Route))
const errors500LazyRoute = errors500LazyRouteImport
  .update({
    id: '/(errors)/500',
    path: '/500',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/500.lazy').then((d) => d.Route))
const errors404LazyRoute = errors404LazyRouteImport
  .update({
    id: '/(errors)/404',
    path: '/404',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/404.lazy').then((d) => d.Route))
const errors403LazyRoute = errors403LazyRouteImport
  .update({
    id: '/(errors)/403',
    path: '/403',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/403.lazy').then((d) => d.Route))
const errors401LazyRoute = errors401LazyRouteImport
  .update({
    id: '/(errors)/401',
    path: '/401',
    getParentRoute: () => rootRouteImport,
  } as any)
  .lazy(() => import('./routes/(errors)/401.lazy').then((d) => d.Route))

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/result': typeof ResultIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/500': typeof errors500LazyRoute
  '/503': typeof errors503LazyRoute
  '/result': typeof ResultIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(errors)/401': typeof errors401LazyRoute
  '/(errors)/403': typeof errors403LazyRoute
  '/(errors)/404': typeof errors404LazyRoute
  '/(errors)/500': typeof errors500LazyRoute
  '/(errors)/503': typeof errors503LazyRoute
  '/result/': typeof ResultIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/401' | '/403' | '/404' | '/500' | '/503' | '/result'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/401' | '/403' | '/404' | '/500' | '/503' | '/result'
  id:
    | '__root__'
    | '/'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/result/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  errors401LazyRoute: typeof errors401LazyRoute
  errors403LazyRoute: typeof errors403LazyRoute
  errors404LazyRoute: typeof errors404LazyRoute
  errors500LazyRoute: typeof errors500LazyRoute
  errors503LazyRoute: typeof errors503LazyRoute
  ResultIndexRoute: typeof ResultIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/result/': {
      id: '/result/'
      path: '/result'
      fullPath: '/result'
      preLoaderRoute: typeof ResultIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401LazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  errors401LazyRoute: errors401LazyRoute,
  errors403LazyRoute: errors403LazyRoute,
  errors404LazyRoute: errors404LazyRoute,
  errors500LazyRoute: errors500LazyRoute,
  errors503LazyRoute: errors503LazyRoute,
  ResultIndexRoute: ResultIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
